# Generated by Django 4.2.7 on 2023-11-05 04:38

import apps.core.utils.upload_path
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import functools


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone', models.CharField(max_length=13, unique=True, verbose_name='Номер телефона')),
                ('email', models.EmailField(max_length=100, null=True, unique=True, verbose_name='E-MAIL')),
                ('type', models.CharField(choices=[('customer', 'Клиент'), ('vendor', 'Поставщик'), ('combo', 'Комбо')], default='customer', max_length=25, verbose_name='Тип пользователя')),
                ('session_lifetime', models.IntegerField(choices=[(86400, 'День'), (604800, 'Неделя'), (2592000, 'Месяц'), (7776000, '3 Месяца'), (15552000, '6 Месяцев'), (31104000, 'Год')], default=15552000, verbose_name='Врямя жизни сессий')),
                ('first_name', models.CharField(max_length=50, verbose_name='Имя')),
                ('last_name', models.CharField(max_length=50, null=True, verbose_name='Фамилия')),
                ('is_active', models.BooleanField(default=True, help_text='Снимите этот флажок, чтобы заблокировать пользователя', verbose_name='active')),
                ('is_verified', models.BooleanField(default=False, help_text='Снимите этот флажок, чтобы пользователь заново верифицировал себя, залогиниться не сможет без верификации', verbose_name='verified')),
                ('date_of_birth', models.DateField(null=True, verbose_name='Дата рождения')),
                ('country', models.CharField(max_length=50, verbose_name='Страна')),
                ('city', models.CharField(max_length=50, null=True, verbose_name='Город')),
                ('street', models.CharField(max_length=50, null=True, verbose_name='Улица')),
                ('image', models.ImageField(max_length=250, null=True, upload_to=functools.partial(apps.core.utils.upload_path._update_filename, *(), **{'path': 'images/user'}), verbose_name='Аватарка')),
                ('verification_code', models.IntegerField(null=True, verbose_name='Верификационный код')),
                ('verification_created_at', models.DateTimeField(blank=True, help_text='Нужно для проверки времени жизни верификационного кода', null=True, verbose_name='Дата отправки верификационного кода')),
                ('email_verified', models.BooleanField(default=False, verbose_name='E-MAIL верифицирован')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователя',
                'verbose_name_plural': 'Пользователи',
                'ordering': ['-date_joined'],
            },
        ),
        migrations.CreateModel(
            name='CustomSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Updated at')),
                ('refresh_token', models.CharField(max_length=255)),
                ('access_token', models.CharField(max_length=255)),
                ('ip_addr', models.GenericIPAddressField(default='45.243.82.169')),
                ('is_active', models.BooleanField(default=True)),
                ('device_name', models.CharField(default='', max_length=255)),
                ('device_type', models.CharField(default='', max_length=255)),
                ('location', models.CharField(blank=True, db_index=True, default='', max_length=255)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Сеанс',
                'verbose_name_plural': 'Сеансы',
                'ordering': ['-updated_at'],
            },
        ),
    ]
